// <auto-generated />
using System;
using DATA.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DATA.Migrations
{
    [DbContext(typeof(PlantItContext))]
    partial class PlantItContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DATA.DAL.Entities.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAddress"));

                    b.Property<string>("AdditionalAddress")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("additional_address");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postal_code");

                    b.Property<string>("Town")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("town");

                    b.Property<string>("Way")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("way");

                    b.HasKey("IdAddress")
                        .HasName("PK_address_id_address");

                    b.HasIndex(new[] { "IdAddress" }, "AK_address_idAddress_UNIQUE")
                        .IsUnique();

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Authentication", b =>
                {
                    b.Property<int>("IdAuthentication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_authentication");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthentication"));

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("password");

                    b.HasKey("IdAuthentication")
                        .HasName("PK_authentication_id_authentication");

                    b.HasIndex(new[] { "Email" }, "AK_authentication_login_UNIQUE")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Password" }, "AK_authentication_password_UNIQUE")
                        .IsUnique()
                        .HasFilter("[password] IS NOT NULL");

                    b.ToTable("authentication", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.BankDetail", b =>
                {
                    b.Property<int>("IdBankDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_bank_details");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBankDetails"));

                    b.Property<string>("Details")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bank_details");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("IdBankDetails")
                        .HasName("PK_bank_details_id_bank_betails");

                    b.HasIndex(new[] { "IdUser" }, "fk_bank_details_user1_idx");

                    b.ToTable("bank_details", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Conversation", b =>
                {
                    b.Property<int>("IdConversation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_conversation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConversation"));

                    b.Property<int>("IdUser1")
                        .HasColumnType("int")
                        .HasColumnName("id_user_1");

                    b.Property<int>("IdUser2")
                        .HasColumnType("int")
                        .HasColumnName("id_user_2");

                    b.HasKey("IdConversation")
                        .HasName("PK_conversation_id_conversation");

                    b.HasIndex(new[] { "IdConversation" }, "AK_conversation_idConversation_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdUser1" }, "fk_Conversation_User1_idx");

                    b.HasIndex(new[] { "IdUser2" }, "fk_Conversation_User2_idx");

                    b.ToTable("conversation", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.CreatedBy", b =>
                {
                    b.Property<int>("IdPlantReference")
                        .HasColumnType("int")
                        .HasColumnName("id_plant_reference");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int?>("OrderNum")
                        .HasColumnType("int")
                        .HasColumnName("order_num");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("IdPlantReference", "IdUser")
                        .HasName("PK_created_by_id_plant_reference_id_user");

                    b.HasIndex(new[] { "IdPlantReference" }, "fk_PlantReference_has_User_PlantReference1_idx");

                    b.HasIndex(new[] { "IdUser" }, "fk_PlantReference_has_User_User1_idx");

                    b.ToTable("created_by", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Maintenance", b =>
                {
                    b.Property<int>("IdMaintenance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_maintenance");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMaintenance"));

                    b.Property<DateTime?>("PredictedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("predicted_date");

                    b.Property<DateTime?>("RealizedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("realized_date");

                    b.Property<string>("Report")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)")
                        .HasColumnName("report");

                    b.HasKey("IdMaintenance")
                        .HasName("PK_maintenance_id_maintenance");

                    b.HasIndex(new[] { "IdMaintenance" }, "AK_maintenance_idMeeting_UNIQUE")
                        .IsUnique();

                    b.ToTable("maintenance", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Manage", b =>
                {
                    b.Property<int>("IdUserCustomer")
                        .HasColumnType("int")
                        .HasColumnName("id_user_customer");

                    b.Property<int>("IdUserBotanist")
                        .HasColumnType("int")
                        .HasColumnName("id_user_botanist");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("IdUserCustomer", "IdUserBotanist")
                        .HasName("PK_manage_id_user_customer_id_user_botanist");

                    b.HasIndex(new[] { "IdUserCustomer" }, "fk_User_has_User_User1_idx");

                    b.HasIndex(new[] { "IdUserBotanist" }, "fk_User_has_User_User2_idx");

                    b.ToTable("manage", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Message", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_message");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"));

                    b.Property<int>("IdConversation")
                        .HasColumnType("int")
                        .HasColumnName("id_conversation");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("IdMessage")
                        .HasName("PK_message_id_message");

                    b.HasIndex(new[] { "IdMessage" }, "AK_message_idMessage_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdConversation" }, "fk_Message_Conversation1_idx");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.PasswordHistoric", b =>
                {
                    b.Property<int>("IdHistoric")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_historic");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistoric"));

                    b.Property<int>("IdAuthentication")
                        .HasColumnType("int")
                        .HasColumnName("id_authentication");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("IdHistoric")
                        .HasName("PK_password_historic_id_historic");

                    b.HasIndex(new[] { "IdHistoric" }, "AK_password_historic_idHistoric_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdAuthentication" }, "fk_password_historic_authentication1_idx");

                    b.ToTable("password_historic", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Picture", b =>
                {
                    b.Property<int>("IdPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_picture");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPicture"));

                    b.Property<string>("Path")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("path");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("update_date");

                    b.HasKey("IdPicture")
                        .HasName("PK_picture_id_picture");

                    b.HasIndex(new[] { "IdPicture" }, "AK_picture_idPictures_UNIQUE")
                        .IsUnique();

                    b.ToTable("picture", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.PictureReference", b =>
                {
                    b.Property<int>("IdPictureReference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_picture_reference");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPictureReference"));

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("modification_date");

                    b.Property<string>("Path")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("path");

                    b.HasKey("IdPictureReference")
                        .HasName("PK_picture_reference_id_picture_reference");

                    b.HasIndex(new[] { "IdPictureReference" }, "AK_picture_reference_idPictureReference_UNIQUE")
                        .IsUnique();

                    b.ToTable("picture_reference", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.Plant", b =>
                {
                    b.Property<int>("IdPlant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_plant");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlant"));

                    b.Property<int?>("Clarity")
                        .HasColumnType("int")
                        .HasColumnName("clarity");

                    b.Property<string>("Container")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("container");

                    b.Property<int?>("Humidity")
                        .HasColumnType("int")
                        .HasColumnName("humidity");

                    b.Property<int>("IdPlantReference")
                        .HasColumnType("int")
                        .HasColumnName("id_plant_reference");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PlacePlant")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("place_plant");

                    b.HasKey("IdPlant")
                        .HasName("PK_plant_id_plant");

                    b.HasIndex(new[] { "IdPlant" }, "AK_plant_idPlant_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdPlantReference" }, "fk_Plant_PlantReference_idx");

                    b.HasIndex(new[] { "IdUser" }, "fk_Plant_User1_idx");

                    b.ToTable("plant", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.PlantReference", b =>
                {
                    b.Property<int>("IdPlantReference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_plant_reference");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlantReference"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Family")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("family");

                    b.Property<string>("FoodSource")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("food_source");

                    b.Property<string>("Lifetime")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("lifetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PlaceLife")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("place_life");

                    b.Property<string>("Reproduction")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("reproduction");

                    b.Property<string>("Size")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("size");

                    b.HasKey("IdPlantReference")
                        .HasName("PK_plant_reference_id_plant_reference");

                    b.HasIndex(new[] { "IdPlantReference" }, "AK_plant_reference_idPlantReference_UNIQUE")
                        .IsUnique();

                    b.ToTable("plant_reference", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Degree")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("degree");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("Hobbies")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("hobbies");

                    b.Property<int>("IdAddress")
                        .HasColumnType("int")
                        .HasColumnName("id_address");

                    b.Property<int>("IdAuthentication")
                        .HasColumnType("int")
                        .HasColumnName("id_authentication");

                    b.Property<int>("IdUserType")
                        .HasColumnType("int")
                        .HasColumnName("id_user_type");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Specialization")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("specialization");

                    b.HasKey("IdUser")
                        .HasName("PK_user_id_user");

                    b.HasIndex(new[] { "IdUser" }, "AK_user_idUser_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdAddress" }, "fk_User_Address1_idx");

                    b.HasIndex(new[] { "IdUserType" }, "fk_User_UserType_idx");

                    b.HasIndex(new[] { "IdAuthentication" }, "fk_user_authentication1_idx");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.UserHistoric", b =>
                {
                    b.Property<int>("IdUserHistoric")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user_historic");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserHistoric"));

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("action");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("reason");

                    b.HasKey("IdUserHistoric", "IdUser")
                        .HasName("PK_user_historic_id_user_historic_id_user");

                    b.HasIndex(new[] { "IdUser" }, "fk_UserHistoric_User1_idx");

                    b.ToTable("user_historic", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.UserType", b =>
                {
                    b.Property<int>("IdUserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user_type");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserType"));

                    b.Property<string>("Label")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("label");

                    b.HasKey("IdUserType")
                        .HasName("PK_user_type_id_user_type");

                    b.HasIndex(new[] { "IdUserType" }, "AK_user_type_idUserType_UNIQUE")
                        .IsUnique();

                    b.ToTable("user_type", (string)null);
                });

            modelBuilder.Entity("MaintenancePicture", b =>
                {
                    b.Property<int>("IdMaintenance")
                        .HasColumnType("int")
                        .HasColumnName("id_maintenance");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int")
                        .HasColumnName("id_picture");

                    b.HasKey("IdMaintenance", "IdPicture")
                        .HasName("PK_maintenance_picture_id_maintenance_id_picture");

                    b.HasIndex(new[] { "IdMaintenance" }, "fk_Maintenance_has_Picture_Maintenance1_idx");

                    b.HasIndex(new[] { "IdPicture" }, "fk_Maintenance_has_Picture_Picture1_idx");

                    b.ToTable("maintenance_picture", (string)null);
                });

            modelBuilder.Entity("MaintenanceUser", b =>
                {
                    b.Property<int>("IdMaintenance")
                        .HasColumnType("int")
                        .HasColumnName("id_maintenance");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.HasKey("IdMaintenance", "IdUser")
                        .HasName("PK_maintenance_user_id_maintenance_id_user");

                    b.HasIndex(new[] { "IdMaintenance" }, "fk_Maintenance_has_User_Maintenance1_idx");

                    b.HasIndex(new[] { "IdUser" }, "fk_Maintenance_has_User_User1_idx");

                    b.ToTable("maintenance_user", (string)null);
                });

            modelBuilder.Entity("PlantConversation", b =>
                {
                    b.Property<int>("IdPlant")
                        .HasColumnType("int")
                        .HasColumnName("id_plant");

                    b.Property<int>("IdConversation")
                        .HasColumnType("int")
                        .HasColumnName("id_conversation");

                    b.HasKey("IdPlant", "IdConversation")
                        .HasName("PK_plant_conversation_id_plant_id_conversation");

                    b.HasIndex(new[] { "IdConversation" }, "fk_Plant_has_Conversation_Conversation1_idx");

                    b.HasIndex(new[] { "IdPlant" }, "fk_Plant_has_Conversation_Plant1_idx");

                    b.ToTable("plant_conversation", (string)null);
                });

            modelBuilder.Entity("PlantPicture", b =>
                {
                    b.Property<int>("IdPlant")
                        .HasColumnType("int")
                        .HasColumnName("id_plant");

                    b.Property<int>("IdPicture")
                        .HasColumnType("int")
                        .HasColumnName("id_picture");

                    b.HasKey("IdPlant", "IdPicture")
                        .HasName("PK_plant_picture_id_plant_id_picture");

                    b.HasIndex(new[] { "IdPicture" }, "fk_Plant_has_Picture_Picture1_idx");

                    b.HasIndex(new[] { "IdPlant" }, "fk_Plant_has_Picture_Plant1_idx");

                    b.ToTable("plant_picture", (string)null);
                });

            modelBuilder.Entity("ReferencedPicture", b =>
                {
                    b.Property<int>("IdPlantReference")
                        .HasColumnType("int")
                        .HasColumnName("id_plant_reference");

                    b.Property<int>("IdPictureReference")
                        .HasColumnType("int")
                        .HasColumnName("id_picture_reference");

                    b.HasKey("IdPlantReference", "IdPictureReference")
                        .HasName("PK_referenced_picture_id_plant_reference_id_picture_reference");

                    b.HasIndex(new[] { "IdPictureReference" }, "fk_PlantReference_has_PictureReference_PictureReference1_idx");

                    b.HasIndex(new[] { "IdPlantReference" }, "fk_PlantReference_has_PictureReference_PlantReference1_idx");

                    b.ToTable("referenced_picture", (string)null);
                });

            modelBuilder.Entity("DATA.DAL.Entities.BankDetail", b =>
                {
                    b.HasOne("DATA.DAL.Entities.User", "User")
                        .WithMany("BankDetailsCollection")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_bank_details_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Conversation", b =>
                {
                    b.HasOne("DATA.DAL.Entities.User", "User1")
                        .WithMany("ConversationUser1Collection")
                        .HasForeignKey("IdUser1")
                        .IsRequired()
                        .HasConstraintName("FK_Conversation_User1");

                    b.HasOne("DATA.DAL.Entities.User", "User2")
                        .WithMany("ConversationUser2Collection")
                        .HasForeignKey("IdUser2")
                        .IsRequired()
                        .HasConstraintName("FK_Conversation_User2");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("DATA.DAL.Entities.CreatedBy", b =>
                {
                    b.HasOne("DATA.DAL.Entities.PlantReference", "PlantReference")
                        .WithMany("CreatedByCollection")
                        .HasForeignKey("IdPlantReference")
                        .IsRequired()
                        .HasConstraintName("FK_created_by_plant_reference");

                    b.HasOne("DATA.DAL.Entities.User", "User")
                        .WithMany("CreatedByCollection")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_created_by_user");

                    b.Navigation("PlantReference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Manage", b =>
                {
                    b.HasOne("DATA.DAL.Entities.User", "Botanist")
                        .WithMany("ManageBotanistCollection")
                        .HasForeignKey("IdUserBotanist")
                        .IsRequired()
                        .HasConstraintName("FK_User_has_User_User2");

                    b.HasOne("DATA.DAL.Entities.User", "Customer")
                        .WithMany("ManageCustomerCollection")
                        .HasForeignKey("IdUserCustomer")
                        .IsRequired()
                        .HasConstraintName("FK_User_has_User_User1");

                    b.Navigation("Botanist");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Message", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Conversation", "Conversation")
                        .WithMany("MessageCollection")
                        .HasForeignKey("IdConversation")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Conversation1");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("DATA.DAL.Entities.PasswordHistoric", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Authentication", "Authentication")
                        .WithMany("PasswordHistoricCollection")
                        .HasForeignKey("IdAuthentication")
                        .IsRequired()
                        .HasConstraintName("FK_password_historic_authentication1");

                    b.Navigation("Authentication");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Plant", b =>
                {
                    b.HasOne("DATA.DAL.Entities.PlantReference", "PlantReference")
                        .WithMany("PlantCollection")
                        .HasForeignKey("IdPlantReference")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_PlantReference1");

                    b.HasOne("DATA.DAL.Entities.User", "User")
                        .WithMany("PlantCollection")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Plant_User1");

                    b.Navigation("PlantReference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DATA.DAL.Entities.User", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Address", "Address")
                        .WithMany("UserCollection")
                        .HasForeignKey("IdAddress")
                        .IsRequired()
                        .HasConstraintName("FK_User_Address1");

                    b.HasOne("DATA.DAL.Entities.Authentication", "Authentication")
                        .WithMany()
                        .HasForeignKey("IdAuthentication")
                        .IsRequired()
                        .HasConstraintName("FK_user_authentication1");

                    b.HasOne("DATA.DAL.Entities.UserType", "UserType")
                        .WithMany("UserCollection")
                        .HasForeignKey("IdUserType")
                        .IsRequired()
                        .HasConstraintName("FK_User_UserType");

                    b.Navigation("Address");

                    b.Navigation("Authentication");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("DATA.DAL.Entities.UserHistoric", b =>
                {
                    b.HasOne("DATA.DAL.Entities.User", "User")
                        .WithMany("UserHistoricCollection")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_UserHistoric_User1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaintenancePicture", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Maintenance", null)
                        .WithMany()
                        .HasForeignKey("IdMaintenance")
                        .IsRequired()
                        .HasConstraintName("FK_Maintenance_has_Picture_Maintenance1");

                    b.HasOne("DATA.DAL.Entities.Picture", null)
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .IsRequired()
                        .HasConstraintName("FK_Maintenance_has_Picture_Picture1");
                });

            modelBuilder.Entity("MaintenanceUser", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Maintenance", null)
                        .WithMany()
                        .HasForeignKey("IdMaintenance")
                        .IsRequired()
                        .HasConstraintName("FK_Maintenance_has_User_Maintenance1");

                    b.HasOne("DATA.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Maintenance_has_User_User1");
                });

            modelBuilder.Entity("PlantConversation", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Conversation", null)
                        .WithMany()
                        .HasForeignKey("IdConversation")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_has_Conversation_Conversation1");

                    b.HasOne("DATA.DAL.Entities.Plant", null)
                        .WithMany()
                        .HasForeignKey("IdPlant")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_has_Conversation_Plant1");
                });

            modelBuilder.Entity("PlantPicture", b =>
                {
                    b.HasOne("DATA.DAL.Entities.Picture", null)
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_has_Picture_Picture1");

                    b.HasOne("DATA.DAL.Entities.Plant", null)
                        .WithMany()
                        .HasForeignKey("IdPlant")
                        .IsRequired()
                        .HasConstraintName("FK_Plant_has_Picture_Plant1");
                });

            modelBuilder.Entity("ReferencedPicture", b =>
                {
                    b.HasOne("DATA.DAL.Entities.PictureReference", null)
                        .WithMany()
                        .HasForeignKey("IdPictureReference")
                        .IsRequired()
                        .HasConstraintName("FK_PlantReference_has_PictureReference_PictureReference1");

                    b.HasOne("DATA.DAL.Entities.PlantReference", null)
                        .WithMany()
                        .HasForeignKey("IdPlantReference")
                        .IsRequired()
                        .HasConstraintName("FK_PlantReference_has_PictureReference_PlantReference1");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Address", b =>
                {
                    b.Navigation("UserCollection");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Authentication", b =>
                {
                    b.Navigation("PasswordHistoricCollection");
                });

            modelBuilder.Entity("DATA.DAL.Entities.Conversation", b =>
                {
                    b.Navigation("MessageCollection");
                });

            modelBuilder.Entity("DATA.DAL.Entities.PlantReference", b =>
                {
                    b.Navigation("CreatedByCollection");

                    b.Navigation("PlantCollection");
                });

            modelBuilder.Entity("DATA.DAL.Entities.User", b =>
                {
                    b.Navigation("BankDetailsCollection");

                    b.Navigation("ConversationUser1Collection");

                    b.Navigation("ConversationUser2Collection");

                    b.Navigation("CreatedByCollection");

                    b.Navigation("ManageBotanistCollection");

                    b.Navigation("ManageCustomerCollection");

                    b.Navigation("PlantCollection");

                    b.Navigation("UserHistoricCollection");
                });

            modelBuilder.Entity("DATA.DAL.Entities.UserType", b =>
                {
                    b.Navigation("UserCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
